/*
Замыкания
1. При запуске скрипта вначале ищутся функции, объявленные через Function Declaration, и загружаются уже работоспособными, затем переменные, объявленные через var, их первоначальное значение  undefined и присваивается значение только тогда, когда выполнение скрипта доходит до соответствующей строки.

2. Функция при запуске создаёт своё собственное LexicalEnvironment – лексическое окружение, причём при каждом новом запуске лексическое окружение создаётся своё.
В лексическое окружение входят аргументы – сразу со значениями, вложенные функции и переменные. Объявленная внутри функции переменная вначале undefined, и значение присваивается позже. 
Если значение переменной указывается уже после указания того, что же делает функция, переменная так и остаётся undefined

3. Если во внутреннем LexicalEnvironment переменная не находится, функция ищет её во внешнем окружении - !том, в котором она была создана, а не в котором запускается («функция помнит где она родилась»).
Здесь ещё вот что интересно – где бы во внешнем окружении ни была присвоена переменная – до объявления функции, или после, она всё равно добавится в функцию со значением, а не undefined. В этом отличие внешних переменных от внутренних.

4. Функция всегда получает последнее значение переменной, указанное до её объявления (для внешних переменных) или описания (для внутренних по отношению к функции переменных).
*/

// Пример 1

var phrase = 'Привет';

function say() {

    function go() {
        alert( phrase );
    }

    go();
}

say(); // Привет
var phrase = 'Пока'; 

// Пример 2

function say() {

    function go() {
        alert( phrase );
    }

    go();
}

say(); // Пока
var phrase = 'Пока';